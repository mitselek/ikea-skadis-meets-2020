// üîç EXTRACTION MODULE LOADER
// This file acts as a thin loader for the modularized extraction system

/**
 * Extraction System Architecture
 * -----------------------------
 * This loader imports the modular extraction system from the /js/extraction/ folder
 * The system is structured into multiple modules:
 *  - index.js - Main entry point and module loader
 *  - extraction-manager.js - Core ExtractionManager class
 *  - page-analyzer.js - Page analysis functionality
 *  - comment-extractor.js - Comment extraction utilities
 *  - auto-loader.js - Auto-loading comment functionality
 *
 * See README.md in the extraction directory for detailed documentation
 */

console.log('üîÑ Loading modularized extraction system...');

// Create a script element to load the main extraction index
const script = document.createElement('script');
script.src = 'js/extraction/index.js';
script.async = false;

// Handle errors
script.onerror = function(error) {
  console.error('Failed to load extraction modules:', error);
  
  // Create minimalist fallback placeholders for critical functionality
  // Note: For simplicity, these will return error messages rather than try to implement full functionality
  
  if (typeof window.ExtractionManager === 'undefined') {
    console.error('Setting up fallback ExtractionManager');
    
    class FallbackExtractionManager {
      constructor() { }
      
      showStatus(message, type) {
        console.error(`Extraction system error: ${message}`);
        const statusEl = document.getElementById('status-message');
        if (statusEl) {
          statusEl.textContent = '‚ö†Ô∏è Module loading error: ' + message;
          statusEl.className = 'error';
        }
      }
      
      async extractCurrentPage() {
        this.showStatus('Page analyzer module failed to load', 'error');
      }
      
      async extractComments() {
        this.showStatus('Comment extractor module failed to load', 'error');
      }
      
      async autoLoadComments() {
        this.showStatus('Auto-loader module failed to load', 'error');
      }
    }
    
    // Export the fallback manager
    window.ExtractionManager = FallbackExtractionManager;
  }
};

// Append the script to the document
document.head.appendChild(script);

// For backwards compatibility, ensure extracted functions are globally available
// These lightweight placeholders will be replaced when modules load successfully
if (typeof analyzePageFunction === 'undefined') {
  window.analyzePageFunction = function temporaryAnalyzePageFunction() {
    console.warn('Page analyzer module not yet loaded, using temporary function');
    return { 
      recommendation: 'LOADING ERROR',
      message: 'Page analyzer module not loaded correctly' 
    };
  };
}

if (typeof extractCommentsFunction === 'undefined') {
  window.extractCommentsFunction = function temporaryExtractCommentsFunction() {
    console.warn('Comment extractor module not yet loaded, using temporary function');
    return [];
  };
}

if (typeof safeAutoLoadCommentsFunction === 'undefined') {
  window.safeAutoLoadCommentsFunction = function temporarySafeAutoLoadCommentsFunction() {
    console.warn('Auto loader module not yet loaded, using temporary function');
    return Promise.resolve({ 
      success: false, 
      message: 'Auto loader module not loaded correctly',
      commentsFound: 0 
    });
  };
}

console.log('‚úÖ Extraction loader initialized');
